<!DOCTYPE html>
<html lang="en">

<%- include('../partials/head.ejs', {title: "Lab 3" }) %>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        svg {

            width: 50vw;
            height: 100vh;
            margin: 0;
            padding: 0;
            position: absolute;
            right: 0;
        }

        .node {
            cursor: pointer;
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }

        .node:hover {
            fill: orange;
        }

        .label {
            font-size: 12px;
            text-anchor: middle;
            pointer-events: none;
        }

        .tooltip {
            position: absolute;
            padding: 10px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            border-radius: 4px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 14px;
        }

        .highlighted {
            fill: red !important;
        }
    </style>

    <body>
        <%- include('../partials/header.ejs', {name: "sample name" }) %>

            <main class="flex flex-col md:flex-row mt-20 gap-6 px-8">

                <!-- Left Container: Image and AI Text -->
                <div class="w-full md:w-1/2 flex flex-col gap-6 bg-white shadow-lg rounded-lg p-6">

                    <!-- Upload Form -->
                    <div class="bg-gray-50 p-4 rounded-md shadow-md">
                        <h2 class="text-lg font-semibold mb-2">Upload Image</h2>
                        <form id="uploadForm" class="flex flex-wrap items-center gap-3">
                            <!-- File Input -->
                            <input type="file" name="image" id="image" required
                                class="block w-1/3 min-w-[200px] text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-500 file:text-white hover:file:bg-blue-600">

                            <!-- Text Input -->
                            <input list="options" id="brainstormFocus" required
                                placeholder="Describe what you want to brainstorm"
                                class="border border-gray-300 rounded-md px-3 py-2 text-sm w-1/3 min-w-[200px]">
                            <datalist id="options">
                                <option value="Look for relationships">
                                <option value="Describe cause and effect">
                                <option value="Explore possible solutions">
                            </datalist>

                            <!-- Submit Button -->
                            <button type="submit"
                                class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-md">
                                Upload
                            </button>
                        </form>
                    </div>

                    <!-- Uploaded Image -->
                    <div class="bg-gray-50 p-4 rounded-md shadow-md">
                        <h2 class="text-lg font-semibold mb-2">Uploaded Image</h2>
                        <div id="uploaded-image"
                            class="flex justify-center items-center h-64 border border-gray-200 rounded-md overflow-hidden">
                            <img src="" alt="Uploaded Image" id="uploaded-image-content"
                                class="object-contain max-h-full">
                        </div>
                    </div>

                    <!-- AI Generated Text -->
                    <div class="bg-gray-50 p-4 rounded-md shadow-md">
                        <h2 class="text-lg font-semibold mb-2">AI Generated Text</h2>
                        <p id="ai-text-content" class="text-gray-600">AI generated explanation...</p>
                    </div>
                </div>

                <!-- Right Container: Force Directed Graph -->
                <div class="w-full md:w-1/2 relative">
                    <svg></svg>

                </div>
                <div class="tooltip"></div>
            </main>

            <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
            <script>
                //globally accessible variables
                const lab_id = "<%= lab_id %>";
            </script>


            <script>
                function load_force_directed_graph({ nodes, links, svgSelector, width, height })
                {
                    // Select the SVG element and set dimensions
                    const svg = d3.select(svgSelector)
                        .attr("width", width)
                        .attr("height", height);

                    //remove existing FDG
                    svg.selectAll("*").remove();

                    // Create a group element to wrap the graph content
                    const graphGroup = svg.append("g");

                    // Create a simulation for the force-directed graph
                    const simulation = d3.forceSimulation(nodes)
                        .force("link", d3.forceLink(links).id(d => d.id).distance(150))
                        .force("charge", d3.forceManyBody().strength(-200))
                        .force("center", d3.forceCenter(width / 2, height / 2));

                    // Create the links (edges) between nodes
                    const link = graphGroup.append("g")
                        .selectAll(".link")
                        .data(links)
                        .enter().append("line")
                        .attr("class", "link")
                        .attr("stroke-width", 2)
                        .attr("stroke", "#aaa");

                    // Create the nodes
                    const node = graphGroup.append("g")
                        .selectAll(".node")
                        .data(nodes)
                        .enter().append("circle")
                        .attr("class", "node")
                        .attr("r", 10)
                        .attr("fill", "steelblue")
                        .call(d3.drag()
                            .on("start", dragStart)
                            .on("drag", dragMove)
                            .on("end", dragEnd));

                    // Add labels to the nodes
                    const labels = graphGroup.append("g")
                        .selectAll(".label")
                        .data(nodes)
                        .enter().append("text")
                        .attr("class", "label")
                        .attr("dy", -15)
                        .text(d => d.label);

                    // Create the tooltip element
                    const tooltip = d3.select(".tooltip");

                    // Update positions on each tick of the simulation
                    simulation.on("tick", () =>
                    {
                        link
                            .attr("x1", d => d.source.x)
                            .attr("y1", d => d.source.y)
                            .attr("x2", d => d.target.x)
                            .attr("y2", d => d.target.y);

                        node
                            .attr("cx", d => d.x)
                            .attr("cy", d => d.y);

                        labels
                            .attr("x", d => d.x)
                            .attr("y", d => d.y);
                    });

                    // Dragging functions
                    function dragStart(event, d)
                    {
                        if (!event.active) simulation.alphaTarget(0.3).restart();
                        d.fx = d.x;
                        d.fy = d.y;
                    }

                    function dragMove(event, d)
                    {
                        d.fx = event.x;
                        d.fy = event.y;
                    }

                    function dragEnd(event, d)
                    {
                        if (!event.active) simulation.alphaTarget(0);
                        d.fx = null;
                        d.fy = null;
                    }

                    // Highlight adjacent nodes when hovering or clicking
                    function highlightAdjacentNodes(d)
                    {
                        const adjacentLinks = links.filter(link => link.source.id === d.id || link.target.id === d.id);
                        const adjacentNodeIds = adjacentLinks.map(link => link.source.id === d.id ? link.target.id : link.source.id);

                        node.classed("highlighted", nodeData => adjacentNodeIds.includes(nodeData.id));
                        link.classed("highlighted", linkData => linkData.source.id === d.id || linkData.target.id === d.id);
                    }

                    // Reset highlighted nodes
                    function resetHighlights()
                    {
                        node.classed("highlighted", false);
                        link.classed("highlighted", false);
                    }

                    // Mouseover and mouseout events for the tooltip
                    node.on("mouseover", function (event, d)
                    {
                        tooltip.transition().duration(200).style("opacity", 0.9);
                        tooltip.html(d.info)
                            .style("left", (event.pageX + 5) + "px")
                            .style("top", (event.pageY - 28) + "px");
                        highlightAdjacentNodes(d);
                    })
                        .on("mouseout", function ()
                        {
                            tooltip.transition().duration(200).style("opacity", 0);
                            resetHighlights();
                        });

                    // Click event to toggle highlights
                    node.on("click", function (event, d)
                    {
                        if (d3.select(this).classed("highlighted"))
                        {
                            resetHighlights();
                        } else
                        {
                            highlightAdjacentNodes(d);
                        }
                    });

                    // Add zoom functionality
                    svg.call(d3.zoom().on("zoom", (event) =>
                    {
                        graphGroup.attr("transform", event.transform);
                    }));


                }

                async function load_image()
                {
                    await axios.get(`/brainstorm3/load-image/${lab_id}`).then((result) =>
                    {
                        console.log(result);
                        const image = result.data.image;
                        const upload_image_content = document.getElementById("uploaded-image-content");
                        upload_image_content.src = "/brainstorm3/images/" + image;

                    }).catch((err) =>
                    {
                        console.error(err);
                    });
                }


                function save_nodes_links_brainstormFocus_ai_text()
                {
                    const brainstormFocus = document.getElementById("brainstormFocus").value;
                    const ai_text = document.getElementById("ai-text-content").innerText;
                    //nodes and links and lab_id are globally accessible
                    const data = { nodes, links, brainstormFocus, ai_text, lab_id };

                    axios.post("/brainstorm3/save-nodes-links-brainstormFocus-ai-text", data).then((result) =>
                    {

                        console.log(result);
                    }).catch((err) =>
                    {
                        console.error(err);
                    });
                }

                function extract_ideas()
                {
                    let ideas = [];
                    nodes.forEach((node) =>
                    {
                        ideas.push(`${node.label}-${node.info}`);
                    });
                    return ideas;
                }

                async function llm()
                {
                    const ai_text = document.getElementById("ai-text-content");
                    ai_text.innerHTML = "";

                    try
                    {
                        const brainstormFocus = document.getElementById("brainstormFocus").value;

                        // Send the list_selected_texts array to the server
                        // Use absolute URL for fetch and EventSource
                        const response = await fetch('/brainstorm3/start-stream', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ ideas: ideas, brainstormFocus: brainstormFocus }),
                        });

                        if (!response.ok)
                        {
                            ai_text.innerHTML = `<p><em>Error occurred while initiating the stream: ${response.statusText}</em></p>`;
                            return;
                        }

                        // Open SSE connection for the streamed response
                        // const eventSource = new EventSource('/llm-stream');
                        const eventSource = new EventSource('/brainstorm3/llm-stream');

                        eventSource.onmessage = function (event)
                        {
                            ai_text.innerHTML += event.data; // Append chunk to the response div
                        };

                        eventSource.onerror = function ()
                        {
                            eventSource.close();
                        };
                    } catch (error)
                    {
                        console.error('Error during fetch or SSE connection:', error);
                        ai_text.innerHTML = `<p><em>Unexpected error occurred: ${error.message}</em></p>`;
                    }


                }

                document.addEventListener("DOMContentLoaded", () =>
                {

                    console.log("lab id", lab_id);
                    axios.get(`/brainstorm3/load-history/${lab_id}`).then((result) =>
                    {
                        console.log(result);

                        if (result.data.nodes != null)
                        {
                            nodes = result.data.nodes;
                            links = result.data.links;
                            load_force_directed_graph({ nodes, links, svgSelector: "svg", width, height });
                        }

                        if (result.data.ai_text != null)
                        {
                            document.getElementById("ai-text-content").innerHTML = result.data.ai_text;
                        }

                        if (result.data.brainstormFocus != null)
                        {
                            document.getElementById("brainstormFocus").value = result.data.brainstormFocus;
                        }

                        if (result.data.image != null)
                        {
                            const upload_image_content = document.getElementById("uploaded-image-content");
                            upload_image_content.src = "/brainstorm3/images/" + result.data.image;
                        }





                        load_force_directed_graph({ nodes, links, svgSelector: "svg", width, height });

                    }).catch((err) =>
                    {

                    });
                });


                // Example usage of the reusable function
                var nodes = [
                    { id: 1, label: "Node 1", info: "This is Node 1's info." },
                    { id: 2, label: "Node 2", info: "This is Node 2's info." },
                    { id: 3, label: "Node 3", info: "This is Node 3's info." },
                    { id: 4, label: "Node 4", info: "This is Node 4's info." },
                ];

                var links = [
                    { source: 1, target: 2 },
                    { source: 1, target: 3 },
                    { source: 2, target: 4 },

                ];



                var ideas = [];
                const width = window.innerWidth * 0.6;
                const height = window.innerHeight * 0.8;

                load_force_directed_graph({ nodes, links, svgSelector: "svg", width, height });
                document.getElementById("uploadForm").addEventListener("submit", (e) =>
                {
                    e.preventDefault();

                    const brainstormFocus = document.getElementById("brainstormFocus");
                    const imageInput = document.getElementById("image");
                    const image = imageInput.files[0];

                    const formData = new FormData();
                    formData.append("image", image);
                    formData.append("brainstormFocus", brainstormFocus.value);
                    formData.append("lab_id", lab_id);

                    axios.post("/brainstorm3/generate-fdg-data", formData, {
                        headers: {
                            "Content-Type": "multipart/form-data",
                        }
                    }).then((result) =>
                    {
                        console.log(result.data);
                        nodes = result.data.nodes;
                        links = result.data.links;
                        load_force_directed_graph({ nodes, links, svgSelector: "svg", width, height });
                        load_image();
                        ideas = extract_ideas();
                        llm();
                        save_nodes_links_brainstormFocus_ai_text();

                    }).catch((err) =>
                    {
                        console.log(err);
                    });

                });

            </script>
    </body>

</html>